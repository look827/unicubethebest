{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/data/users.ts"],"sourcesContent":["import type { User } from '@/lib/types';\n\nexport const USERS: User[] = [\n    {\n      id: '1',\n      name: 'Sehajdeep',\n      email: 'sehajdeep@unicube.com',\n      role: 'admin',\n      avatarUrl: 'https://picsum.photos/seed/avatar1/100/100',\n    },\n    {\n      id: '2',\n      name: 'Naitik Beri',\n      email: 'naitik@unicube.com',\n      role: 'employee',\n      avatarUrl: 'https://picsum.photos/seed/avatar2/100/100',\n    },\n    {\n      id: '3',\n      name: 'Arjun Sharma',\n      email: 'arjun@unicube.com',\n      role: 'employee',\n      avatarUrl: 'https://picsum.photos/seed/avatar3/100/100',\n    },\n  ];\n  "],"names":[],"mappings":";;;AAEO,MAAM,QAAgB;IACzB;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,MAAM;QACN,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,MAAM;QACN,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,MAAM;QACN,WAAW;IACb;CACD"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/auth.ts"],"sourcesContent":["'use server';\n\nimport 'server-only';\nimport { cookies } from 'next/headers';\nimport type { SessionPayload, User } from '@/lib/types';\nimport { USERS } from '@/lib/data/users';\n\n// This would be in an environment variable in a real application\nconst SECRET_KEY = process.env.SESSION_SECRET || 'your-secret-key-for-development-only-change-in-prod';\nif (SECRET_KEY === 'your-secret-key-for-development-only-change-in-prod' && process.env.NODE_ENV === 'production') {\n  console.warn('WARNING: The session secret is not set. Please set SESSION_SECRET in your environment variables.');\n}\n\n\n// For simplicity in this scaffold, we're using a basic object.\n// In a real app, you would use a library like `jose` for robust JWTs.\nasync function encrypt(payload: SessionPayload) {\n  // This is a placeholder for actual encryption\n  return JSON.stringify(payload);\n}\n\nasync function decrypt(session: string): Promise<SessionPayload | null> {\n  try {\n    // This is a placeholder for actual decryption\n    const payload = JSON.parse(session);\n    // Very basic validation\n    if (payload.userId && payload.expiresAt) {\n      return {\n        ...payload,\n        expiresAt: new Date(payload.expiresAt),\n      };\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function createSession(userId: string) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n  const session = await encrypt({ userId, expiresAt });\n\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  });\n}\n\nexport async function getSession(): Promise<SessionPayload | null> {\n  const sessionCookie = cookies().get('session')?.value;\n  if (!sessionCookie) return null;\n\n  const session = await decrypt(sessionCookie);\n  if (!session || new Date() > session.expiresAt) {\n    return null;\n  }\n\n  return session;\n}\n\nexport async function getUser(): Promise<User | null> {\n  const session = await getSession();\n  if (!session) return null;\n\n  const user = USERS.find((u) => u.id === session.userId);\n  return user || null;\n}\n\nexport async function deleteSession() {\n  cookies().delete('session');\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAAA;AAEA;AALA;;;;AAOA,iEAAiE;AACjE,MAAM,aAAa,QAAQ,GAAG,CAAC,cAAc,IAAI;AACjD,uCAAmH;;AAEnH;AAGA,+DAA+D;AAC/D,sEAAsE;AACtE,eAAe,QAAQ,OAAuB;IAC5C,8CAA8C;IAC9C,OAAO,KAAK,SAAS,CAAC;AACxB;AAEA,eAAe,QAAQ,OAAe;IACpC,IAAI;QACF,8CAA8C;QAC9C,MAAM,UAAU,KAAK,KAAK,CAAC;QAC3B,wBAAwB;QACxB,IAAI,QAAQ,MAAM,IAAI,QAAQ,SAAS,EAAE;YACvC,OAAO;gBACL,GAAG,OAAO;gBACV,WAAW,IAAI,KAAK,QAAQ,SAAS;YACvC;QACF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,cAAc,MAAc;IAChD,MAAM,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,OAAO,SAAS;IAC3E,MAAM,UAAU,MAAM,QAAQ;QAAE;QAAQ;IAAU;IAElD,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,WAAW,SAAS;QAChC,UAAU;QACV,QAAQ,oDAAyB;QACjC,SAAS;QACT,UAAU;QACV,MAAM;IACR;AACF;AAEO,eAAe;IACpB,MAAM,gBAAgB,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,YAAY;IAChD,IAAI,CAAC,eAAe,OAAO;IAE3B,MAAM,UAAU,MAAM,QAAQ;IAC9B,IAAI,CAAC,WAAW,IAAI,SAAS,QAAQ,SAAS,EAAE;QAC9C,OAAO;IACT;IAEA,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM;IACtB,IAAI,CAAC,SAAS,OAAO;IAErB,MAAM,OAAO,mIAAA,CAAA,QAAK,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,QAAQ,MAAM;IACtD,OAAO,QAAQ;AACjB;AAEO,eAAe;IACpB,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,MAAM,CAAC;AACnB"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\nimport { getSession } from '@/lib/auth';\nimport { USERS } from '@/lib/data/users';\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n\n  const session = await getSession();\n\n  const publicRoutes = ['/'];\n  const isPublicRoute = publicRoutes.includes(pathname);\n  const adminRoutes = ['/dashboard', '/attendance', '/goals'];\n\n  if (session) {\n    const user = USERS.find((u) => u.id === session.userId);\n    // If logged in and on a public route (like login page), redirect to dashboard/my-requests\n    if (isPublicRoute) {\n      const url = user?.role === 'admin' ? '/dashboard' : '/my-requests';\n      return NextResponse.redirect(new URL(url, request.url));\n    }\n    // Prevent employees from accessing admin routes\n    if (adminRoutes.some(p => pathname.startsWith(p)) && user?.role !== 'admin') {\n        return NextResponse.redirect(new URL('/my-requests', request.url));\n    }\n  } else {\n    // If not logged in and not on a public route, redirect to login\n    if (!isPublicRoute) {\n      return NextResponse.redirect(new URL('/', request.url));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD;IAE/B,MAAM,eAAe;QAAC;KAAI;IAC1B,MAAM,gBAAgB,aAAa,QAAQ,CAAC;IAC5C,MAAM,cAAc;QAAC;QAAc;QAAe;KAAS;IAE3D,IAAI,SAAS;QACX,MAAM,OAAO,mIAAA,CAAA,QAAK,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,QAAQ,MAAM;QACtD,0FAA0F;QAC1F,IAAI,eAAe;YACjB,MAAM,MAAM,MAAM,SAAS,UAAU,eAAe;YACpD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;QACA,gDAAgD;QAChD,IAAI,YAAY,IAAI,CAAC,CAAA,IAAK,SAAS,UAAU,CAAC,OAAO,MAAM,SAAS,SAAS;YACzE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,QAAQ,GAAG;QACpE;IACF,OAAO;QACL,gEAAgE;QAChE,IAAI,CAAC,eAAe;YAClB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;IACF;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}